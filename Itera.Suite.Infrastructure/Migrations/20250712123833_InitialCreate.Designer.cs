// <auto-generated />
using System;
using Itera.Suite.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Itera.Suite.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250712123833_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("text");

                    b.Property<string>("ContatoPrincipal")
                        .HasColumnType("text");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Documento")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<int?>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("text");

                    b.Property<string>("Contato")
                        .HasColumnType("text");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<string>("TipoDeServico")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ComprovanteDaOrdemDePagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnexadoPor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NomeArquivoOriginal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PagamentoDaOrdemDePagamentoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PagamentoDaOrdemDePagamentoId")
                        .IsUnique();

                    b.ToTable("ComprovantesDaOrdemDePagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ItemDeCusto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("text");

                    b.Property<int>("Categoria")
                        .HasColumnType("integer");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Diarias")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FornecedorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjetoDeViagemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<string>("StatusAtual")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("ProjetoDeViagemId");

                    b.ToTable("ItensDeCusto");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ObservacaoDaOrdemDePagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrdemDePagamentoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrdemDePagamentoId");

                    b.ToTable("ObservacoesOrdemDePagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ObservacaoDaQuitacaoDaOrdemDePagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("QuitacaoDaOrdemDePagamentoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuitacaoDaOrdemDePagamentoId");

                    b.ToTable("ObservacoesQuitacaoDaOrdemDePagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ObservacaoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemDeCustoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemDeCustoId");

                    b.ToTable("ObservacoesItem");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ObservacaoProjeto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjetoDeViagemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoDeViagemId");

                    b.ToTable("ObservacoesProjeto");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.OrdemDePagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataPrevista")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Forma")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ItemDeCustoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorAutorizado")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ItemDeCustoId");

                    b.ToTable("OrdensDePagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.PagamentoDaOrdemDePagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FormaPagamento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("PagamentosDaOrdemDePagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ProjetoDeViagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("text");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DataRetorno")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataSaida")
                        .HasColumnType("date");

                    b.Property<string>("Destino")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeInterno")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Objetivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ProjetosDeViagem", (string)null);
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.QuitacaoDaOrdemDePagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataQuitacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrdemDePagamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PagamentoDaOrdemDePagamentoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorQuitado")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrdemDePagamentoId");

                    b.HasIndex("PagamentoDaOrdemDePagamentoId");

                    b.ToTable("QuitacoesDaOrdemDePagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.RegistroStatusItemDeCusto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArquivoUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemDeCustoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Justificativa")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioResponsavel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemDeCustoId");

                    b.ToTable("RegistrosStatusItemDeCusto");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Identity.UsuarioIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ComprovanteDaOrdemDePagamento", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Entities.PagamentoDaOrdemDePagamento", "Pagamento")
                        .WithOne("ComprovanteDaOrdemDePagamento")
                        .HasForeignKey("Itera.Suite.Domain.Entities.ComprovanteDaOrdemDePagamento", "PagamentoDaOrdemDePagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ItemDeCusto", b =>
                {
                    b.HasOne("Fornecedor", "Fornecedor")
                        .WithMany("ItensDeCusto")
                        .HasForeignKey("FornecedorId");

                    b.HasOne("Itera.Suite.Domain.Entities.ProjetoDeViagem", "ProjetoDeViagem")
                        .WithMany("ItensDeCusto")
                        .HasForeignKey("ProjetoDeViagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("ProjetoDeViagem");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ObservacaoDaOrdemDePagamento", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Entities.OrdemDePagamento", "OrdemDePagamento")
                        .WithMany("Observacoes")
                        .HasForeignKey("OrdemDePagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdemDePagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ObservacaoDaQuitacaoDaOrdemDePagamento", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Entities.QuitacaoDaOrdemDePagamento", "QuitacaoDaOrdemDePagamento")
                        .WithMany("Observacoes")
                        .HasForeignKey("QuitacaoDaOrdemDePagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuitacaoDaOrdemDePagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ObservacaoItem", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Entities.ItemDeCusto", "ItemDeCusto")
                        .WithMany("Observacoes")
                        .HasForeignKey("ItemDeCustoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemDeCusto");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ObservacaoProjeto", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Entities.ProjetoDeViagem", "ProjetoDeViagem")
                        .WithMany("Observacoes")
                        .HasForeignKey("ProjetoDeViagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjetoDeViagem");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.OrdemDePagamento", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Entities.ItemDeCusto", "ItemDeCusto")
                        .WithMany("Pagamentos")
                        .HasForeignKey("ItemDeCustoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemDeCusto");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ProjetoDeViagem", b =>
                {
                    b.HasOne("Cliente", "Cliente")
                        .WithMany("Projetos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.QuitacaoDaOrdemDePagamento", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Entities.OrdemDePagamento", "OrdemDePagamento")
                        .WithMany("Quitacoes")
                        .HasForeignKey("OrdemDePagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itera.Suite.Domain.Entities.PagamentoDaOrdemDePagamento", "Pagamento")
                        .WithMany("Quitacoes")
                        .HasForeignKey("PagamentoDaOrdemDePagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdemDePagamento");

                    b.Navigation("Pagamento");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.RegistroStatusItemDeCusto", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Entities.ItemDeCusto", null)
                        .WithMany("HistoricoStatus")
                        .HasForeignKey("ItemDeCustoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Identity.UsuarioIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Identity.UsuarioIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itera.Suite.Domain.Identity.UsuarioIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Itera.Suite.Domain.Identity.UsuarioIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("Projetos");
                });

            modelBuilder.Entity("Fornecedor", b =>
                {
                    b.Navigation("ItensDeCusto");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ItemDeCusto", b =>
                {
                    b.Navigation("HistoricoStatus");

                    b.Navigation("Observacoes");

                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.OrdemDePagamento", b =>
                {
                    b.Navigation("Observacoes");

                    b.Navigation("Quitacoes");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.PagamentoDaOrdemDePagamento", b =>
                {
                    b.Navigation("ComprovanteDaOrdemDePagamento");

                    b.Navigation("Quitacoes");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.ProjetoDeViagem", b =>
                {
                    b.Navigation("ItensDeCusto");

                    b.Navigation("Observacoes");
                });

            modelBuilder.Entity("Itera.Suite.Domain.Entities.QuitacaoDaOrdemDePagamento", b =>
                {
                    b.Navigation("Observacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
