@page "/fornecedores"
@using Itera.Suite.Front.Services.Fornecedor
@using Microsoft.AspNetCore.Authorization
@inject FornecedorService FornecedorService
@inject Radzen.DialogService DialogService
@inject Radzen.NotificationService NotificationService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<RadzenStack Gap="1rem">

    <!-- Painel de ação -->
    <RadzenCard Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1.5rem" Wrap="FlexWrap.Wrap">
            @if (selectedFornecedores?.Any() == true)
            {
                <div>
                    Selecionado: <strong>@selectedFornecedores[0].Nome</strong>
                </div>

                <RadzenButton Icon="edit"
                              Text="Editar"
                              ButtonStyle="ButtonStyle.Secondary"
                              Click="@(() => OpenEditDialog(selectedFornecedores[0]))" />

                <RadzenButton Icon="delete"
                              Text="Deletar"
                              ButtonStyle="ButtonStyle.Danger"
                              Click="@(() => DeleteFornecedor(selectedFornecedores[0].Id))" />

                <RadzenButton Text="Limpar Seleção" Click="@ClearSelection" />
            }
        </RadzenStack>
    </RadzenCard>

    <!-- Lista de fornecedores -->
    <RadzenDataGrid Data="@fornecedores"
                    TItem="FornecedorModel"
                    SelectionMode="DataGridSelectionMode.Single"
                    @bind-Value="@selectedFornecedores"
                    AllowFiltering="true"
                    AllowPaging="true"
                    PageSize="5"
                    AllowSorting="true">

        <Columns>
            <RadzenDataGridColumn Property="Nome" Title="Nome" />
            <RadzenDataGridColumn Property="Contato" Title="Contato" />
            <RadzenDataGridColumn Property="Telefone" Title="Telefone" />
        </Columns>

    </RadzenDataGrid>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1.5rem" Wrap="FlexWrap.Wrap">
        <RadzenButton Icon="add" Text="Novo Fornecedor" ButtonStyle="ButtonStyle.Primary" Click="@NovoFornecedor" />
    </RadzenStack>

</RadzenStack>

@code {
    IEnumerable<FornecedorModel> fornecedores;
    IList<FornecedorModel> selectedFornecedores;

    protected override async Task OnInitializedAsync()
    {
        fornecedores = await FornecedorService.GetAll();
        selectedFornecedores = new List<FornecedorModel>();
    }

    void ClearSelection() => selectedFornecedores = null;

    async Task OpenEditDialog(FornecedorModel fornecedor)
    {
        NavigationManager.NavigateTo($"/fornecedores/editar/{fornecedor.Id}");
    }

    async Task DeleteFornecedor(Guid id)
    {
        var confirmed = await DialogService.Confirm("Confirma excluir?", "Confirmação");
        if (confirmed == true)
        {
            await FornecedorService.Delete(id);
            NotificationService.Notify(Radzen.NotificationSeverity.Success, "Sucesso", "Fornecedor removido");
            fornecedores = await FornecedorService.GetAll();
        }
    }

    void NovoFornecedor()
    {
        NavigationManager.NavigateTo("/fornecedores/novo");
    }
}
